#!/usr/bin/python
# -*- coding: utf-8 -*-

#
# Copyright (c) 2016 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

DOCUMENTATION = '''
---
module: ovirt_auth
short_description: This module is used to obtain SSO token for oVirt engine
author: "Ondra Machacek (@machacekondra)"
version_added: 2.0
description:
    - "This module authenticate to oVirt engine and create SSO token, which should be later used in
       all other oVirt modules, so all modules don't need to perform login and logout."
options:
    username:
        required: True
        description:
            - "The name of the user, something like I(admin@internal)."
    password:
        required: True
        description:
            - "The password of the user."
    url:
        required: True
        description:
            - "A string containing the base URL of the server,
               usually something like I(https://server.example.com/ovirt-engine/api)."
    insecure:
        required: False
        description:
            - "A boolean flag that indicates if the server TLS certificate and host name should be checked."
    ca_file:
        required: False
        description:
            - "A PEM file containing the trusted CA certificates. The
               certificate presented by the server will be verified using these CA
               certificates. If C(ca_file) parameter is not set, system wide
               CA certificate store is used."
   timeout:
        required: False
        description:
            - "The maximum total time to wait for the response, in
               seconds. A value of zero (the default) means wait for ever. If
               the timeout expires before the response is received an exception
               will be raised."
    compress:
        required: False
        description:
            - "A boolean flag indicating if the SDK should ask
               the server to send compressed responses. The default is I(False).
               Note that this is a hint for the server, and that it may return
               uncompressed data even when this parameter is set to I(True)."
    sso_url:
        required: False
        description:
            - "A string containing the base SSO URL of the serve. Default SSO url
               is computed from the C(url) if no C(sso_url) is provided."
    sso_revoke_url:
        required: False
        description:
            - "A string containing the base URL of the SSO
               revoke service. This needs to be specified only when using
               an external authentication service. By default this URL
               is automatically calculated from the value of the C(url) parameter,
               so that SSO token revoke will be performed using the SSO service
               that is part of the engine."
    sso_token_name:
        required: False
        description:
            - "The token name in the JSON SSO response returned
               from the SSO server. Default value is I(access_token)."
'''


RETURN = '''
'''


def main():
    module = AnsibleModule(
        argument_spec=dict(
            url=dict(required=True, type='str'),
            username=dict(required=True, type='str'),
            password=dict(required=True, type='str'),
            ca_file=dict(required=False, type='str'),
            insecure=dict(required=False, type='bool', default=False),
            timeout=dict(required=False, type='int', default=0),
            compress=dict(required=False, type='bool', default=False),
            sso_url=dict(required=False, type='str'),
            sso_revoke_url=dict(required=False, type='str'),
            sso_token_name=dict(required=False, type='str', default='access_token'),
        )
    )

    connection = Connection(
        url=module.params.get('url'),
        username=module.params.get('username'),
        password=module.params.get('password'),
        ca_file=module.params.get('ca_file'),
        insecure=module.params.get('insecure'),
        timeout=module.params.get('timeout'),
        compress=module.params.get('compress'),
        sso_url=module.params.get('sso_url'),
        sso_revoke_url=module.params.get('sso_revoke_url'),
        sso_token_name=module.params.get('sso_token_name'),
    )
    try:
        sso_token = connection._get_access_token()
        module.exit_json(
            changed=False,
            ansible_facts=dict(
                ovirt_auth=dict(
                    sso_token=sso_token,
                    url=module.params.get('url'),
                    username=module.params.get('username'),
                    password=module.params.get('password'),
                    ca_file=module.params.get('ca_file'),
                    insecure=module.params.get('insecure'),
                    timeout=module.params.get('timeout'),
                    compress=module.params.get('compress'),
                    sso_url=module.params.get('sso_url'),
                    sso_revoke_url=module.params.get('sso_revoke_url'),
                    sso_token_name=module.params.get('sso_token_name'),
                )
            )
        )
    except Exception as e:
        module.fail_json(msg="Error: %s" % e)


from ansible.module_utils.basic import *
from ansible.module_utils.ovirt import *
if __name__ == "__main__":
    main()
